{
    "contents" : "#' Statistical significance test\n#'\n#' Tests the significance of the coefficients\n#'\n#' @param Y A matrix object; The number of columns is one; The number of rows depends on the data \n#' @param X A matrix object; The number of rows is the same as that of \\code{Y}; The number of columns depends on the data\n#'  \n#' @return An object of class Regressions containing\n#'  \\item{output}{Output includes t-statistics, p-value, and the sign of significance for each covariate}\n#' @author Taeyong Park\n#' \n#' @examples\n#' set.seed(0520)\n#' myY <- matrix(sample(1:20, 50, replace=TRUE), 50, 1) \n#' myX <- matrix(c(runif(50), runif(50), rnorm(50)), 50, 3) \n#' testReg(Y=myY, X=myX)\n#' @seealso \\code{\\link{runReg}}\n#' @rdname testReg\n#' @aliases Regressions,ANY-method\n#' @export\nsetGeneric(name=\"testReg\",\n           def=function(Y, X, ...)\n           {standardGeneric(\"testReg\")}\n)\n\n#' @export\nsetMethod(f=\"testReg\",\n          definition=function(Y, X, ...){\n            Z <- list()  # Z will contain every combination of X\n            tStatList <- list() # This will be transformed to the form of matrix\n            tStat <- matrix(NA, ncol(X), ncol(X)+1)\n            pValueList <- list() # This will be transformed to the form of matrix\n            pValue <- matrix(NA, ncol(X), ncol(X)+1)\n            sigList <- list() # This will be transformed to the form of matrix\n            sig <- matrix(\"Not Signigicant\", ncol(X), ncol(X)+1) # This will report \"significance\" of each coefficient\n            alpha = 0.05\n            for (i in 2:ncol(X)){ # The first elements are not looped to make it easy to create every combination of the covariates\n              Z[[1]] <- X[,1]  \n              Z[[i]] <- cbind(X[,i],Z[[i-1]]) # This ensures that Z will contain every combination of the covariates\n              tStatList[[1]] <- summary(lm(Y ~ Z[[1]]))$coef[,3]\n              tStatList[[i]] <- summary(lm(Y ~ Z[[i]]))$coef[,3]\n              tStat[1,] <- c(tStatList[[1]], rep(NA, (ncol(X)+1)-length(tStatList[[1]]))) # Now, we want to transform tStatList to the form of matrix\n              tStat[i,] <- c(tStatList[[i]], rep(NA, (ncol(X)+1)-length(tStatList[[i]]))) \n              pValueList[[1]] <- summary(lm(Y ~ Z[[1]]))$coef[,4]\n              pValueList[[i]] <- summary(lm(Y ~ Z[[i]]))$coef[,4]\n              pValue[1,] <- c(pValueList[[1]], rep(NA, (ncol(X)+1)-length(pValueList[[1]]))) # Now, we want to transform pValueList to the form of matrix\n              pValue[i,] <- c(pValueList[[i]], rep(NA, (ncol(X)+1)-length(pValueList[[i]]))) \n              sigList[[1]] <- ifelse(pValueList[[1]]>=alpha, \"Not Significant\", \"Significant\") # If pValue for the coefficient is larger than the significance level (alpha), then it returns \"Not Significant.\"\n              sigList[[i]] <- ifelse(pValueList[[i]]>=alpha, \"Not Significant\", \"Significant\")\n              sig[1,] <- c(sigList[[1]], rep(NA, (ncol(X)+1)-length(sigList[[1]]))) # Now, we want to transform sigList to the form of matrix\n              sig[i,] <- c(sigList[[i]], rep(NA, (ncol(X)+1)-length(sigList[[i]])))\n            }\n            output <- list(tStat, pValue, sig)\n            names(output) <- c(\"tStat\", \"pValue\", \"significance\")\n            return((new(\"Regressions\", Y=Y, X=X, output=output)))\n          }\n)\n\n# getRegressions(testReg(myY, myX))\n",
    "created" : 1395114720044.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "574962190",
    "id" : "ABC87B69",
    "lastKnownWriteTime" : 1395116512,
    "path" : "~/GitHub/RPackageProblemSet/regressionsPack/R/4testReg.R",
    "project_path" : "R/4testReg.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}